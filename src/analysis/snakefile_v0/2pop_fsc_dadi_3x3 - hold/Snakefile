"""
Snakefile for running 9 simulations of fsc26 and dadi on stdpopsim data, two population
"""
import sys
import numpy as np
import stdpopsim
sys.path.append("/code/src/methods/fsc26/")
import fastsimcoal
sys.path.append("/code/src/methods/dadi/")
import dadi_utils
import tskit
import pandas as pd
import plots

# ###############################################################################
# preperation :
# ###############################################################################

configfile: config["config"]+"/config.json"

np.random.seed(config["seed"])

# This is the number of samples to simulate for within each population
# for each replicate
# needs to be equal across sampled populations (or 0)
num_samples_per_population = config["num_samples_per_population"]
num_sampled_genomes_per_replicate = max(num_samples_per_population)

# The number of replicates of each analysis, # of seeds
replicates = config["replicates"]

# Where you would like all output files from analysis to live
output_dir = config["config"]

# The analysis species
species = stdpopsim.get_species(config["species"])

# The specific model you would like to run
model = species.get_demographic_model(config["model"])

# modifying the models events
generation_time = model.generation_time

mode_dict = {
  "reg": 140e3 / generation_time ,
  "high": 200e3 / generation_time,
  "low": 60e3 / generation_time,
  }

# identifier of chaned model use
model_modes = list(mode_dict.keys())

T_Div_loc = -1;
for i in range(len(model.demographic_events)):
    e = model.demographic_events[i]
    if e.type == "mass_migration":
        if e.source == 1 and e.dest == 0 and e.proportion == 1.0:
            T_Div_loc = i;

# The genetic map you would like to use.
# if value None is given default_recombination_rates are
# used with a flat map
genetic_map_id = config.get("genetic_map", None)

# The names of all chromosomes to simulate, separated by commas
# Use "all" to simulate all chromsomes for the genome
chrm_list = [chrom for chrom in species.genome.chromosomes]
if "chrY" in chrm_list:
    chrm_list.remove("chrY")
if(config["chrm_list"] != "all"):
    chrm_list = [chr for chr in config["chrm_list"].split(",")]

# The model for inference with fsc
# Need different priors and mutation rates depending on species
fsc_model = ['IM_hum']

# The model for inference with dadi
dadi_model = ['IM_fsc']

# The number of dadi runs
# Also leaving this hard coded for now
# Ideally want this to apply to both dadi and fsc but having problems with automating fsc (see below)
fit_runs = 10

# This grabs the default mr from the first chromosome,
# Ultimitely This needs to be replaced with the weighted average
# of all chromosomes: This should be done in stdpopsim.
mutation_rate = species.genome.mean_mutation_rate

# path for methods directory.
methods_dir_path = "/code/src/methods"

# ###############################################################################
# GENERAL RULES & GLOBALS
# ###############################################################################

seed_array = np.random.random_integers(1,2**31,replicates)
dadi_seed_array = np.random.randint(0, 4294967295 + 1, fit_runs)
genetic_map_downloaded_flag= ".genetic_map_downloaded"

try:
    mask_file = config["mask_file"]
except KeyError:
    mask_file = None

rule all:
    input: expand([output_dir + "/{model_mode}/{seeds}/Results/estimates_N_tdiv_dadi_fsc.png", output_dir + "/{model_mode}/{seeds}/Results/estimates_mig_dadi_fsc.png"], model_mode=model_modes,seeds=seed_array)

rule download_genetic_map:
    output: genetic_map_downloaded_flag
    message: "Downloading default genetic map"
    run:
        # We need to have this here to avoid several threads trying to download the
        # the genetic map into the cache at the same time.
        if genetic_map_id is not None:
            genetic_map = species.get_genetic_map(genetic_map_id)
            if not genetic_map.is_cached():
                genetic_map.download()
            with open(output[0], "w") as f:
                print("File to indicate genetic map has been downloaded", file=f)


rule simulation:
    input:
        genetic_map_downloaded_flag
    output:
        output_dir + "/{model_mode}/{seeds}/Intermediate/{chrms}.trees"
    run:
        # use the right model based on the simulation run
        model.demographic_events[T_Div_loc].time = mode_dict[wildcards.model_mode]
        model.demographic_events[T_Div_loc + 1].time = mode_dict[wildcards.model_mode]
        engine = stdpopsim.get_default_engine()
        contig = species.get_contig(wildcards.chrms, genetic_map=genetic_map_id)
        samples = model.get_samples(*num_samples_per_population)
        ts = engine.simulate(model, contig, samples, seed=wildcards.seeds)
        ts.dump(output[0])


# ###############################################################################
# dadi
# ###############################################################################

rule ts_to_dadi_sfs:
    input:rules.simulation.output
    output: output_dir + "/{model_mode}/{seeds}/Intermediate/{chrms}_dadi_joint_sfs.fs",
           output_dir + "/{model_mode}/{seeds}/Intermediate/{chrms}_dadi_joint_sfs_with_nonvariant.fs"
    run:
        dadi_utils.ts_to_dadi_sfs(input[0], output[0],output[1], sample_size = num_sampled_genomes_per_replicate, mask_file=mask_file)

rule compare_msprime_sfs_to_OutOfAfrica_model:
    input: expand(output_dir + "/{model_mode}/{seeds}/Intermediate/{chrms}_dadi_joint_sfs.fs", model_mode=model_modes, seeds=seed_array, chrms=chrm_list)
    output: output_dir +  "/{model_mode}/{seeds}/Intermediate/dadi_analysis/compare_dadi_to_int_sfs_resid_range_50.pdf"
    run:
        inputs = expand(output_dir + "/{model_mode}/{seeds}/Intermediate/{chrms}_dadi_joint_sfs.fs", model_mode=model_modes, seeds=wildcards.seeds, chrms=chrm_list)
        dadi_utils.compare_msprime_dadi_OutOfAfrica(inputs,output[0],num_sampled_genomes_per_replicate)

rule fit_dadi_model_to_msprime_sfs:
    input: expand(output_dir + "/{model_mode}/{seeds}/Intermediate/{chrms}_dadi_joint_sfs.fs", model_mode=model_modes, seeds=seed_array, chrms=chrm_list)
    output:
        output_dir +  "/{model_mode}/{seeds}/Intermediate/dadi_analysis/{demo_model}/model_fit_{fit_seeds}.pdf",
        output_dir +  "/{model_mode}/{seeds}/Intermediate/dadi_analysis/{demo_model}/model_params_{fit_seeds}.txt"

    run:
        inputs = expand(output_dir + "/{model_mode}/{seeds}/Intermediate/{chrms}_dadi_joint_sfs.fs", model_mode=model_modes, seeds=wildcards.seeds, chrms=chrm_list)
        dadi_utils.fit_dadi_model(inputs,output[0],output[1],wildcards.demo_model, wildcards.fit_seeds,num_sampled_genomes_per_replicate)

# ###############################################################################
# fastsimcoal
# ###############################################################################
 
rule dadi_sfs_to_fsc:
    input: expand(output_dir + "/{model_mode}/{seeds}/Intermediate/{chrms}_dadi_joint_sfs_with_nonvariant.fs",model_mode=model_modes, chrms=chrm_list,seeds=seed_array)

    output: output_dir + "/{model_mode}/{seeds}/Intermediate/fsc_analysis/{demo_model}_jointDAFpop1_0.obs"

    run:
        inputs = input
        dadi_out_path = output_dir + "/" + wildcards.model_mode + "/" + wildcards.seeds + "/Intermediate/all_chrm_dadi_joint_sfs_with_nonvariant.fs"
        fsc_out_path  = output_dir + "/" + wildcards.model_mode + "/" + wildcards.seeds + "/Intermediate/fsc_analysis/" + wildcards.demo_model + "_jointDAFpop1_0.obs"
        fastsimcoal.dadi_to_fsc_sfs(inputs, dadi_out_path, fsc_out_path, sample_size=num_sampled_genomes_per_replicate)

rule fsc_setup:
    input: expand(output_dir + "/{model_mode}/{seeds}/Intermediate/fsc_analysis/{demo_model}_jointDAFpop1_0.obs",model_mode=model_modes, seeds=seed_array,demo_model=fsc_model)

    output: output_dir + "/{model_mode}/{seeds}/Intermediate/fsc_analysis/{demo_model}.est",
            output_dir + "/{model_mode}/{seeds}/Intermediate/fsc_analysis/{demo_model}.tpl"

    shell: "cp fsc_files/{wildcards.demo_model}.est {output_dir}/{wildcards.model_mode}/{wildcards.seeds}/Intermediate/fsc_analysis/{wildcards.demo_model}.est && \
            cp fsc_files/{wildcards.demo_model}.tpl {output_dir}/{wildcards.model_mode}/{wildcards.seeds}/Intermediate/fsc_analysis/{wildcards.demo_model}.tpl && \
            sed -i.bak 's/SAMPLE_SIZE/{num_sampled_genomes_per_replicate}/' {output_dir}/{wildcards.model_mode}/{wildcards.seeds}/Intermediate/fsc_analysis/{wildcards.demo_model}.tpl && rm {output_dir}/{wildcards.model_mode}/{wildcards.seeds}/Intermediate/fsc_analysis/{wildcards.demo_model}.tpl.bak &&\
            cd {methods_dir_path}/fsc26/ && chmod +x fsc26"

rule run_fsc:
    input: expand(output_dir + "/{model_mode}/{seeds}/Intermediate/fsc_analysis/{demo_model}.tpl", model_mode=model_modes, seeds=seed_array,demo_model=fsc_model)

    output: output_dir + "/{model_mode}/{seeds}/Intermediate/fsc_analysis/run10/{demo_model}/{demo_model}.bestlhoods"

    # I want to run this with a bash loop from 1..fit_runs to automate the number of fsc runs but for the life of me I cant get it to work in snakemake (it works fine in a shell script)
    # it keeps spitting out a python 'out of index' error and I've spent way too much time trying to troubleshoot it with no success
    # if someome can figure this out they would be my hero. Until that day, will continue to use this wall of bash code
    shell: "cd {output_dir}/{wildcards.model_mode}/{wildcards.seeds}/Intermediate/fsc_analysis/  && \
              mkdir run1 &&\
              cd run1 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              {methods_dir_path}/fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q -c 4 &&\
              cd .. &&\
              mkdir run2 &&\
              cd run2 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              {methods_dir_path}/fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q -c 4 &&\
              cd .. &&\
              mkdir run3 &&\
              cd run3 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              {methods_dir_path}/fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q -c 4 &&\
              cd .. &&\
              mkdir run4 &&\
              cd run4 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              {methods_dir_path}/fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q -c 4 &&\
              cd .. &&\
              mkdir run5 &&\
              cd run5 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              {methods_dir_path}/fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q -c 4 &&\
              cd .. &&\
              mkdir run6 &&\
              cd run6 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              {methods_dir_path}/fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q -c 4 &&\
              cd .. &&\
              mkdir run7 &&\
              cd run7 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              {methods_dir_path}/fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q -c 4 &&\
              cd .. &&\
              mkdir run8 &&\
              cd run8 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              {methods_dir_path}/fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q -c 4 &&\
              cd .. &&\
              mkdir run9 &&\
              cd run9 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              {methods_dir_path}/fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q -c 4 &&\
              cd .. &&\
              cd run10 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              {methods_dir_path}/fsc26/fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q -c 4"

# ###############################################################################
# Compile results and plot
# ###############################################################################

rule get_dadi_fsc_output:
    input: expand(output_dir+"/{model_mode}/{seeds}/Intermediate/dadi_analysis/{demo_model}/model_params_{fit_seeds}.txt", model_mode=model_modes,fit_seeds=dadi_seed_array, seeds=seed_array, demo_model=dadi_model),
           expand(output_dir+"/{model_mode}/{seeds}/Intermediate/fsc_analysis/run10/{demo_model}/{demo_model}.bestlhoods", model_mode=model_modes, seeds=seed_array,demo_model=fsc_model)

    output: output_dir + "/{model_mode}/{seeds}/Intermediate/dadi_analysis/dadi_results_sorted.txt",output_dir + "/{model_mode}/{seeds}/Intermediate/fsc_analysis/fsc_results_sorted.txt"

    run:
        for seed in seed_array:
            for mod in model_modes:
                fastsimcoal.get_fsc_output(output_dir + "/" + mod + "/" + str(seed) + "/Intermediate/fsc_analysis/",10,"fsc_results_sorted.txt",fsc_model[0])
                dadi_utils.get_dadi_output_IM(output_dir + "/" + mod + "/" + str(seed) + "/Intermediate/dadi_analysis/",dadi_model[0],dadi_seed_array,"dadi_results_sorted.txt")

# see what it does
rule get_best_dadi_fsc_runs:
    input: expand(output_dir+"/{model_mode}/{seeds}/Intermediate/dadi_analysis/dadi_results_sorted.txt",model_mode=model_modes,seeds=seed_array),
           expand(output_dir+"/{model_mode}/{seeds}/Intermediate/fsc_analysis/fsc_results_sorted.txt",model_mode=model_modes,seeds=seed_array)

    output: output_dir + "/{model_mode}/{seeds}/Results/best_fsc_runs.txt",
            output_dir + "/{model_mode}/{seeds}/Results/best_dadi_runs.txt"

    run:
        fastsimcoal.get_best_fsc_runs_general(output_dir+ "/" + wildcards.model_mode + "/" + wildcards.seeds + "/Intermediate", output[0])   
        dadi_utils.get_best_dadi_runs(output_dir+ "/" + wildcards.model_mode + "/" + wildcards.seeds + "/Intermediate", seed_array, output[1])

rule plot_estimates:
    input: rules.get_best_dadi_fsc_runs.output

    output: 
        output_dir + "/{model_mode}/{seeds}/Results/estimates_N_tdiv_dadi_fsc.png", output_dir + "/{model_mode}/{seeds}/Results/estimates_mig_dadi_fsc.png"

    run:
        simulated_genome_length = 0
        for chr in chrm_list:
            ts=tskit.load(output_dir + "/" + model_modes[0] + "/" + str(seed_array[0]) + "/Intermediate/" + chr + ".trees")
            simulated_genome_length += ts.sequence_length
            if mask_file:
                mask_table = pd.read_csv(mask_file, sep="\t", header=None)
                sub = mask_table[mask_table[0] == chr]
                mask_ints = pd.IntervalIndex.from_arrays(sub[1], sub[2])
                simulated_genome_length -= np.sum(mask_ints.length)
        T_Div = mode_dict[wildcards.model_mode]
        plots.plot_dadi_fsc_results_human_IM(input[1], input[0], output, simulated_genome_length, T_Div)

rule clean:
    shell:
        f"rm -rf {output_dir}/*/Intermediate \
            {output_dir}/*/Results \
            .genetic_map_downloaded \
            .snakemake"